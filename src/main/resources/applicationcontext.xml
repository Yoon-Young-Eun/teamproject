<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">


	<!-- database.properties 파일에 설정된 프로퍼티들을 이용하여 DataSource를 설정 -->
	<context:property-placeholder location="classpath:config/database.properties" />

	
	<!-- DataSource 등록 -->
	<bean id="dataSource"
		class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
<!--   mysql 설정
      <bean id="dataSource"
      class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
      <property name="driverClass" value="com.mysql.cj.jdbc.Driver" />
      <property name="url" value="jdbc:mysql://localhost:3306/DB이름?characterEncoding=utf8&amp;serverTimezone=UTC" />
      <property name="username" value="아이디" />
      <property name="password" value="비밀번호" />
    </bean> -->
	
	


	<!-- 트랜잭션: 스프링에 제공하는 모둔 트랜잭션 관리자는 commit(), rollback()메서드를 가지고 있다. -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 트랜잭션 관리기능 제공 : 비즈니스 메서드 실행전이나 후에 공통기능(예외처리, 트랜잭션)을 제공 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>    
			<tx:method name="get*" read-only="true" />  <!-- get으로 시작되는 메서드는 트랜잭션 관리대상 제외 -->
			<tx:method name="*" /> <!-- 나머지 모든 메서드는 트랜잭선 관리대상 포함 -->
		</tx:attributes>
	</tx:advice>
	<!-- txPointcut으로 지정한 메서드가 호출될때 txAdvice로 등록한 어드바이스가 동작하여 트랜잭션을 관리하는 설정 -->
	<aop:config>
		<aop:pointcut
			expression="execution(* tommy.spring.web..*(..))" id="txPointcut" />
		<aop:advisor advice-ref="txAdvice"
			pointcut-ref="txPointcut" />
	</aop:config>


	<!-- 스프링 JDBC 설정 
	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean> -->

	<!-- Spring - mybatis 연동설정 : SqlSessionFactoryBean 클래스를 Bean으로 등록해야 한다. -->
	<bean id="sessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation"
			value="classpath:mybatis-config.xml" />
	</bean>

	<!-- – SqlSessionTemplate 클래스를 이용한 mybatis 설정 SqlSessionTemplate는 setter메서드가 
		없어서 생성자 인젝션을 사용할 수 밖에 없다. -->
	<bean id="sqlSessionTemplate"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sessionFactory" />
	</bean>



</beans>

